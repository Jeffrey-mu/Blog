(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{512:function(s,e,a){"use strict";a.r(e);var t=a(13),o=Object(t.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"【session、cookie、token】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【session、cookie、token】"}},[s._v("#")]),s._v(" 【Session、Cookie、Token】")]),s._v(" "),a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/5/17147e399a7dd4cb~tplv-t2oaga2asx-watermark.awebp"}}),s._v(" "),a("h2",{attrs:{id:"cookie-和-session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-和-session"}},[s._v("#")]),s._v(" Cookie 和 Session")]),s._v(" "),a("p",[s._v("HTTP 协议是一种无状态协议，即每次服务端接收到客户端的请求时，都是一个全新的请求，服务器并不知道客户端的历史请求记录；Session 和 Cookie 的主要目的就是为了弥补 HTTP 的无状态特性。")]),s._v(" "),a("h2",{attrs:{id:"session-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session-是什么"}},[s._v("#")]),s._v(" Session 是什么")]),s._v(" "),a("p",[s._v("客户端请求服务端，服务端会为这次请求开辟一块内存空间，这个对象便是 Session 对象，存储结构为 ConcurrentHashMap。Session 弥补了 HTTP 无状态特性，服务器可以利用 Session 存储客户端在同一个会话期间的一些操作记录。")]),s._v(" "),a("h3",{attrs:{id:"session-如何判断是否是同一会话"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session-如何判断是否是同一会话"}},[s._v("#")]),s._v(" Session 如何判断是否是同一会话")]),s._v(" "),a("p",[s._v("服务器第一次接收到请求时，开辟了一块 Session 空间（创建了Session对象），同时生成一个 sessionId ，并通过响应头的 **Set-Cookie：JSESSIONID=XXXXXXX **命令，向客户端发送要求设置 Cookie 的响应； 客户端收到响应后，在本机客户端设置了一个 **JSESSIONID=XXXXXXX **的 Cookie 信息，该 Cookie 的过期时间为浏览器会话结束；")]),s._v(" "),a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/5/17147e399d7970b6~tplv-t2oaga2asx-watermark.awebp"}}),s._v(" "),a("p",[s._v("接下来客户端每次向同一个网站发送请求时，请求头都会带上该 Cookie信息（包含 sessionId ）， 然后，服务器通过读取请求头中的 Cookie 信息，获取名称为 JSESSIONID 的值，得到此次请求的 sessionId。")]),s._v(" "),a("h3",{attrs:{id:"session-的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session-的缺点"}},[s._v("#")]),s._v(" Session 的缺点")]),s._v(" "),a("p",[s._v("Session 机制有个缺点，比如 A 服务器存储了 Session，就是做了负载均衡后，假如一段时间内 A 的访问量激增，会转发到 B 进行访问，但是 B 服务器并没有存储 A 的 Session，会导致 Session 的失效。")]),s._v(" "),a("h2",{attrs:{id:"cookies-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookies-是什么"}},[s._v("#")]),s._v(" Cookies 是什么")]),s._v(" "),a("p",[s._v("HTTP 协议中的 Cookie 包括 Web Cookie 和浏览器 Cookie，它是服务器发送到 Web 浏览器的一小块数据。服务器发送到浏览器的 Cookie，浏览器会进行存储，并与下一个请求一起发送到服务器。通常，它用于判断两个请求是否来自于同一个浏览器，例如用户保持登录状态。")]),s._v(" "),a("p",[s._v("Cookie 主要用于下面三个目的")]),s._v(" "),a("ul",[a("li",[s._v("会话管理")])]),s._v(" "),a("p",[s._v("登陆、购物车、游戏得分或者服务器应该记住的其他内容")]),s._v(" "),a("ul",[a("li",[s._v("个性化")])]),s._v(" "),a("p",[s._v("用户偏好、主题或者其他设置")]),s._v(" "),a("ul",[a("li",[s._v("追踪")])]),s._v(" "),a("p",[s._v("记录和分析用户行为\nCookie 曾经用于一般的客户端存储。虽然这是合法的，因为它们是在客户端上存储数据的唯一方法，但如今建议使用现代存储 API。Cookie 随每个请求一起发送，因此它们可能会降低性能（尤其是对于移动数据连接而言）")]),s._v(" "),a("h3",{attrs:{id:"创建-cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建-cookie"}},[s._v("#")]),s._v(" 创建 Cookie")]),s._v(" "),a("p",[s._v("当接收到客户端发出的 HTTP 请求时，服务器可以发送带有响应的 Set-Cookie 标头，Cookie 通常由浏览器存储，然后将 Cookie 与 HTTP 标头一同向服务器发出请求。")]),s._v(" "),a("h3",{attrs:{id:"set-cookie-和-cookie-标头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-cookie-和-cookie-标头"}},[s._v("#")]),s._v(" Set-Cookie 和 Cookie 标头")]),s._v(" "),a("p",[s._v("Set-Cookie HTTP 响应标头将 cookie 从服务器发送到用户代理。下面是一个发送 Cookie 的例子\n"),a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/5/17147e399c20870a~tplv-t2oaga2asx-watermark.awebp"}}),a("br"),s._v("\n此标头告诉客户端存储 Cookie")]),s._v(" "),a("p",[s._v("现在，随着对服务器的每个新请求，浏览器将使用 Cookie 头将所有以前存储的 Cookie 发送回服务器。")]),s._v(" "),a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/5/17147e399aefd856~tplv-t2oaga2asx-watermark.awebp"}}),s._v(" "),a("p",[s._v("有两种类型的 Cookies，一种是 Session Cookies，一种是 Persistent Cookies，如果 Cookie 不包含到期日期，则将其视为会话 Cookie。会话 Cookie 存储在内存中，永远不会写入磁盘，当浏览器关闭时，此后 Cookie 将永久丢失。如果 Cookie 包含==有效期== ，则将其视为持久性 Cookie。在到期指定的日期，Cookie 将从磁盘中删除。\n还有一种是 ==Cookie的 Secure 和 HttpOnly 标记==，下面依次来介绍一下")]),s._v(" "),a("h3",{attrs:{id:"会话-cookies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#会话-cookies"}},[s._v("#")]),s._v(" 会话 Cookies")]),s._v(" "),a("p",[s._v("上面的示例创建的是会话 Cookie ，会话 Cookie 有个特征，客户端关闭时 Cookie 会删除，因为它没有指定==Expires==或 ==Max-Age== 指令。\n但是，Web 浏览器可能会使用会话还原，这会使大多数会话 Cookie 保持永久状态，就像从未关闭过浏览器一样。")]),s._v(" "),a("h3",{attrs:{id:"永久性-cookies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#永久性-cookies"}},[s._v("#")]),s._v(" 永久性 Cookies")]),s._v(" "),a("p",[s._v("永久性 Cookie 不会在客户端关闭时过期，而是在==特定日期==（Expires）或==特定时间长度（Max-Age）==外过期。例如")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("Set"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Cookie"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("a3fWa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" Expires"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("Wed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(" Oct "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2015")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("07")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GMT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"cookie-的-secure-和-httponly-标记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-的-secure-和-httponly-标记"}},[s._v("#")]),s._v(" Cookie 的 Secure 和 HttpOnly 标记")]),s._v(" "),a("p",[s._v("安全的 Cookie 需要经过 HTTPS 协议通过加密的方式发送到服务器。即使是安全的，也不应该将敏感信息存储在cookie 中，因为它们本质上是不安全的，并且此标志不能提供真正的保护。")]),s._v(" "),a("h3",{attrs:{id:"httponly-的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#httponly-的作用"}},[s._v("#")]),s._v(" HttpOnly 的作用")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("会话 Cookie 中缺少 HttpOnly 属性会导致攻击者可以通过程序(JS脚本、Applet等)获取到用户的 Cookie  信息，造成用户 Cookie 信息泄露，增加攻击者的跨站脚本攻击威胁。")])]),s._v(" "),a("li",[a("p",[s._v("HttpOnly 是微软对 Cookie 做的扩展，该值指定 Cookie 是否可通过客户端脚本访问。")])]),s._v(" "),a("li",[a("p",[s._v("如果在 Cookie 中没有设置 HttpOnly 属性为 true，可能导致 Cookie 被窃取。窃取的 Cookie 可以包含标识站点用户的敏感信息，如 "),a("a",{attrs:{href:"http://ASP.NET",target:"_blank",rel:"noopener noreferrer"}},[s._v("ASP.NET"),a("OutboundLink")],1),s._v(" 会话 ID 或 Forms 身份验证票证，攻击者可以重播窃取的 Cookie，以便伪装成用户或获取敏感信息，进行跨站脚本攻击等。")])])]),s._v(" "),a("h3",{attrs:{id:"cookie-的作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-的作用域"}},[s._v("#")]),s._v(" Cookie 的作用域")]),s._v(" "),a("p",[s._v("Domain 和 Path 标识定义了 Cookie 的作用域：即 Cookie 应该发送给哪些 URL。\nDomain 标识指定了哪些主机可以接受 Cookie。如果不指定，默认为当前主机(不包含子域名）。如果指定了Domain，则一般包含子域名。\n例如，如果设置 "),a("a",{attrs:{href:"http://Domain=mozilla.org",target:"_blank",rel:"noopener noreferrer"}},[s._v("Domain=mozilla.org"),a("OutboundLink")],1),s._v("，则 Cookie 也包含在子域名中（"),a("a",{attrs:{href:"http://xn--developer-k99p.mozilla.org",target:"_blank",rel:"noopener noreferrer"}},[s._v("如developer.mozilla.org"),a("OutboundLink")],1),s._v("）。\n例如，设置 Path=/docs，则以下地址都会匹配：")]),s._v(" "),a("ul",[a("li",[s._v("/docs")]),s._v(" "),a("li",[s._v("/docs/Web/")]),s._v(" "),a("li",[s._v("/docs/Web/HTTP")])]),s._v(" "),a("h3",{attrs:{id:"json-web-token-和-session-cookies-的对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json-web-token-和-session-cookies-的对比"}},[s._v("#")]),s._v(" JSON Web Token 和 Session Cookies 的对比")]),s._v(" "),a("p",[s._v("==JSON Web Token ==，简称 ==JWT==，它和 Session都可以为网站提供用户的身份认证，但是它们不是一回事。")]),s._v(" "),a("p",[s._v("下面是 JWT 和 Session 不同之处的研究")]),s._v(" "),a("h3",{attrs:{id:"jwt-和-session-cookies-的相同之处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jwt-和-session-cookies-的相同之处"}},[s._v("#")]),s._v(" JWT 和 Session Cookies 的相同之处")]),s._v(" "),a("p",[s._v("在探讨 JWT 和 Session Cookies 之前，有必要需要先去理解一下它们的相同之处。\n它们既可以对用户进行身份验证，也可以用来在用户单击进入不同页面时以及登陆网站或应用程序后进行身份验证。\n如果没有这两者，那你可能需要在每个页面切换时都需要进行登录了。因为 HTTP 是一个无状态的协议。这也就意味着当你访问某个网页，然后单击同一站点上的另一个页面时，服务器的内存中将不会记住你之前的操作。")]),s._v(" "),a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/5/17147e399ae02cc8~tplv-t2oaga2asx-watermark.awebp"}}),s._v(" "),a("p",[s._v("因此，如果你登录并访问了你有权访问的另一个页面，由于 HTTP 不会记录你刚刚登录的信息，因此你将再次登录。")]),s._v(" "),a("h3",{attrs:{id:"jwt-和-session-cookies-就是用来处理在不同页面之间切换-保存用户登录信息的机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jwt-和-session-cookies-就是用来处理在不同页面之间切换-保存用户登录信息的机制"}},[s._v("#")]),s._v(" JWT 和 Session Cookies 就是用来处理在不同页面之间切换，保存用户登录信息的机制")]),s._v(" "),a("p",[s._v("也就是说，这两种技术都是用来保存你的登录状态，能够让你在浏览任意受密码保护的网站。通过在每次产生新的请求时对用户数据进行身份验证来解决此问题。\n所以 JWT 和 Session Cookies 的相同之处是什么？那就是它们能够支持你在发送不同请求之间，记录并验证你的登录状态的一种机制。")]),s._v(" "),a("h2",{attrs:{id:"什么是-session-cookies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-session-cookies"}},[s._v("#")]),s._v(" 什么是 Session Cookies")]),s._v(" "),a("p",[s._v("Session Cookies 也称为会话 Cookies，在 Session Cookies 中，用户的登录状态会保存在服务器的内存中。当用户登录时，Session 就被服务端安全的创建。\n在每次请求时，服务器都会从会话 Cookie 中读取 SessionId，如果服务端的数据和读取的 SessionId 相同，那么服务器就会发送响应给浏览器，允许用户登录。")]),s._v(" "),a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/5/17147e39cc16b100~tplv-t2oaga2asx-watermark.awebp"}}),s._v(" "),a("h2",{attrs:{id:"什么是-json-web-tokens"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-json-web-tokens"}},[s._v("#")]),s._v(" 什么是 Json Web Tokens")]),s._v(" "),a("p",[s._v("Json Web Token 的简称就是 JWT，通常可以称为 Json 令牌。它是RFC 7519 中定义的用于安全的将信息作为 Json 对象进行传输的一种形式。JWT 中存储的信息是经过数字签名的，因此可以被信任和理解。可以使用 HMAC 算法或使用 RSA/ECDSA 的公用/专用密钥对 JWT 进行签名。")]),s._v(" "),a("p",[s._v("使用 JWT 主要用来下面两点")]),s._v(" "),a("ul",[a("li",[s._v("证(Authorization)：这是使用 JWT 最常见的一种情况，一旦用户登录，后面每个请求都会包含 JWT，从而允许用户访问该令牌所允许的路由、服务和资源。单点登录是当今广泛使用 JWT 的一项功能，因为它的开销很小。")]),s._v(" "),a("li",[s._v("信息交换(Information Exchange)：JWT 是能够安全传输信息的一种方式。通过使用公钥/私钥对 JWT 进行签名认证。此外，由于签名是使用 head 和 payload 计算的，因此你还可以验证内容是否遭到篡改。")])]),s._v(" "),a("h3",{attrs:{id:"jwt-的格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jwt-的格式"}},[s._v("#")]),s._v(" JWT 的格式")]),s._v(" "),a("p",[s._v("下面，我们会探讨一下 JWT 的组成和格式是什么")]),s._v(" "),a("p",[s._v("JWT 主要由三部分组成，每个部分用 . 进行分割，各个部分分别是")]),s._v(" "),a("ul",[a("li",[s._v("Header")]),s._v(" "),a("li",[s._v("Payload")]),s._v(" "),a("li",[s._v("Signature")]),s._v(" "),a("li")]),s._v(" "),a("p",[s._v("因此，一个非常简单的 JWT 组成会是下面这样")]),s._v(" "),a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/5/17147e39ca50d82a~tplv-t2oaga2asx-watermark.awebp"}}),s._v("\n然后我们分别对不同的部分进行探讨。\n"),a("h4",{attrs:{id:"header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#header"}},[s._v("#")]),s._v(" Header")]),s._v(" "),a("p",[s._v("Header 是 JWT 的标头，它通常由两部分组成：令牌的类型(即 JWT)和使用的 签名算法，例如 HMAC SHA256 或 RSA。\n例如")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "alg": "HS256",\n  "typ": "JWT"\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("指定类型和签名算法后，Json 块被 Base64Url 编码形成 JWT 的第一部分。")]),s._v(" "),a("h4",{attrs:{id:"payload"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#payload"}},[s._v("#")]),s._v(" Payload")]),s._v(" "),a("p",[s._v("Token 的第二部分是 Payload，Payload 中包含一个声明。声明是有关实体（通常是用户）和其他数据的声明。共有三种类型的声明：registered, public 和 private 声明。")]),s._v(" "),a("ul",[a("li",[s._v("registered 声明： 包含一组建议使用的预定义声明，主要包括")])]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("ISS")]),s._v(" "),a("th",[s._v("签发人")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("iss (issuer)")]),s._v(" "),a("td",[s._v("签发人")])]),s._v(" "),a("tr",[a("td",[s._v("exp (expiration time)")]),s._v(" "),a("td",[s._v("过期时间")])]),s._v(" "),a("tr",[a("td",[s._v("sub (subject)")]),s._v(" "),a("td",[s._v("主题")])]),s._v(" "),a("tr",[a("td",[s._v("aud (audience)")]),s._v(" "),a("td",[s._v("受众")])]),s._v(" "),a("tr",[a("td",[s._v("nbf (Not Before)")]),s._v(" "),a("td",[s._v("生效时间")])]),s._v(" "),a("tr",[a("td",[s._v("iat (Issued At)")]),s._v(" "),a("td",[s._v("签发时间")])]),s._v(" "),a("tr",[a("td",[s._v("jti (JWT ID)")]),s._v(" "),a("td",[s._v("编号")])])])]),s._v(" "),a("ul",[a("li",[s._v("public 声明：公共的声明，可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息，但不建议添加敏感信息，因为该部分在客户端可解密。")]),s._v(" "),a("li",[s._v("private 声明：自定义声明，旨在在同意使用它们的各方之间共享信息，既不是注册声明也不是公共声明。")])]),s._v(" "),a("p",[s._v("例如")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "sub": "1234567890",\n  "name": "John Doe",\n  "admin": true\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("然后 payload Json 块会被Base64Url 编码形成 JWT 的第二部分。")]),s._v(" "),a("h4",{attrs:{id:"signature"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#signature"}},[s._v("#")]),s._v(" signature")]),s._v(" "),a("p",[s._v("JWT 的第三部分是一个签证信息，这个签证信息由三部分组成")]),s._v(" "),a("ul",[a("li",[s._v("header (base64后的)")]),s._v(" "),a("li",[s._v("payload (base64后的)")]),s._v(" "),a("li",[s._v("secret\n比如我们需要 HMAC SHA256 算法进行签名")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('HMACSHA256(\n  base64UrlEncode(header) + "." +\n  base64UrlEncode(payload),\n  secret)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("签名用于验证消息在此过程中没有更改，并且对于使用私钥进行签名的令牌，它还可以验证 JWT 的发送者的真实身份")]),s._v(" "),a("h4",{attrs:{id:"拼凑在一起"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拼凑在一起"}},[s._v("#")]),s._v(" 拼凑在一起")]),s._v(" "),a("p",[s._v("现在我们把上面的三个由点分隔的 Base64-URL 字符串部分组成在一起，这个字符串可以在 HTML 和 HTTP 环境中轻松传递这些字符串。\n下面是一个完整的 JWT 示例，它对 header 和 payload 进行编码，然后使用 signature 进行签名")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/5/17147e39cc29f678~tplv-t2oaga2asx-watermark.awebp"}}),s._v(" "),a("h3",{attrs:{id:"jwt-和-session-cookies-的不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jwt-和-session-cookies-的不同"}},[s._v("#")]),s._v(" JWT 和 Session Cookies 的不同")]),s._v(" "),a("p",[s._v("JWT 和 Session Cookies 都提供安全的用户身份验证，但是它们有以下几点不同")]),s._v(" "),a("h3",{attrs:{id:"密码签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#密码签名"}},[s._v("#")]),s._v(" 密码签名")]),s._v(" "),a("p",[s._v("JWT 具有加密签名，而 Session Cookies 则没有。")]),s._v(" "),a("h3",{attrs:{id:"json-是无状态的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json-是无状态的"}},[s._v("#")]),s._v(" JSON 是无状态的")]),s._v(" "),a("p",[s._v("JWT 是无状态的，因为声明被存储在客户端，而不是服务端内存中。")]),s._v(" "),a("p",[s._v("身份验证可以在本地进行，而不是在请求必须通过服务器数据库或类似位置中进行。 这意味着可以对用户进行多次身份验证，而无需与站点或应用程序的数据库进行通信，也无需在此过程中消耗大量资源。")]),s._v(" "),a("h3",{attrs:{id:"可扩展性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可扩展性"}},[s._v("#")]),s._v(" 可扩展性")]),s._v(" "),a("p",[s._v("Session Cookies 是存储在服务器内存中，这就意味着如果网站或者应用很大的情况下会耗费大量的资源。由于 JWT 是无状态的，在许多情况下，它们可以节省服务器资源。因此 JWT 要比 Session Cookies 具有更强的可扩展性。")]),s._v(" "),a("h3",{attrs:{id:"jwt-支持跨域认证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jwt-支持跨域认证"}},[s._v("#")]),s._v(" JWT 支持跨域认证")]),s._v(" "),a("p",[s._v("Session Cookies 只能用在单个节点的域或者它的子域中有效。如果它们尝试通过第三个节点访问，就会被禁止。如果你希望自己的网站和其他站点建立安全连接时，这是一个问题。\n使用 JWT 可以解决这个问题，使用 JWT 能够通过多个节点进行用户认证，也就是我们常说的跨域认证。")]),s._v(" "),a("h3",{attrs:{id:"jwt-和-session-cookies-的选型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jwt-和-session-cookies-的选型"}},[s._v("#")]),s._v(" JWT 和 Session Cookies 的选型")]),s._v(" "),a("p",[s._v("我们上面探讨了 JWT 和 Cookies 的不同点，相信你也会对选型有了更深的认识，大致来说\n对于只需要登录用户并访问存储在站点数据库中的一些信息的中小型网站来说，Session Cookies 通常就能满足。\n如果你有企业级站点，应用程序或附近的站点，并且需要处理大量的请求，尤其是第三方或很多第三方（包括位于不同域的API），则 JWT 显然更适合。")])])}),[],!1,null,null,null);e.default=o.exports}}]);